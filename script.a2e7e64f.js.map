{"version":3,"sources":["js/controller.js","js/hero.js","js/model.js","js/view.js","js/slider.js","js/modalForm.js","js/script.js"],"names":["Controller","model","view","getHeroes","dataHeroes","length","Promise","resolve","then","heroes","renderHeroesList","template","displayHeroesList","catch","id","getHero","getRandomHero","hero","renderHero","displayBigHero","heroCardBig","resultDiv","querySelector","replaceChild","insertAdjacentElement","slider","innerHTML","append","state","calculateSimilarity","renderHeroCard","element","value","name","promise","filterFromState","house","gender","staff","isAlive","document","hogwarts","getRandomHeroes","Hero","dateOfBirth","eyeColour","hairColour","hogwartsStaff","hogwartsStudent","image","patronus","species","alive","actor","fromHogwarts","assignHoggwarts","slice","URL","Model","url","$constructHeroesList","fileteredHeroes","Object","entries","reduce","initial","entry","result","key","newdataHeroes","filter","toLowerCase","includes","reject","resultHeroes","faculty","filterByHouse","filterByHogwarts","filterByGender","filterByName","getheroesFromServer","xhr","XMLHttpRequest","responseType","open","addEventListener","status","alert","statusText","response","send","constructHeroesList","map","item","Math","floor","random","Set","size","index","add","Array","from","find","forEach","val","score","sort","a","b","View","templateIdMark","generateOccupation","renderHeroeSmall","renderHeroBig","content","cloneNode","dataset","occupationTemplate","newTemplate","templateImg","src","alt","textContent","createDocumentFragment","Slider","CARD_MARGIN","cardWidth","offsetWidth","direction","dir","cardsPerSlider","round","sliderWidth","totalSliderWidth","children","left","style","parseInt","abs","target","card","closest","classList","contains","sliderButtons","querySelectorAll","ModalForm","modalWindow","remove","closeModal","form","elements","type","checked","findButton","App","facultyForm","filterFormHandler","filterForm","resetBtn","resetHandler","btn","sliderMove","cardHandler","controller","modalFormHandler","event","preventDefault","modalFormSubmit","renderSimilarHeroes","formFilterHandler","resetFilter","app","addListeners"],"mappings":"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","file":"script.a2e7e64f.js","sourceRoot":"..","sourcesContent":["/* eslint-disable indent */\n\nclass Controller {\n  constructor(model, view) {\n    this.model = model;\n    this.view = view;\n    this.resultDiv = document.querySelector('.results');\n    this.state = {\n      house: null,\n      gender: null,\n      name: null,\n      hogwarts: null,\n      isAlive: null,\n    };\n    this.getHeroes().then(heroes => this.renderHeroCard(heroes));\n    this.getHeroes()\n      .then(heroes => this.model.getRandomHeroes(heroes))\n      .then(heroes => this.renderHeroesList(heroes));\n  }\n\n  getHeroes = () => this.model.getHeroes();\n\n  renderHeroesList = dataHeroes => {\n    if (dataHeroes.length === 0) {\n      return;\n    }\n    Promise.resolve(dataHeroes)\n      .then(heroes => this.view.renderHeroesList(heroes))\n      .then(template => this.displayHeroesList(template))\n      .catch();\n  };\n\n  renderHeroCard = (dataHeroes, id = null) => {\n    let promise = null;\n    if (id != null) {\n      promise = Promise.resolve(dataHeroes).then(heroes => this.model.getHero(heroes, id));\n    } else {\n      promise = Promise.resolve(dataHeroes).then(heroes => this.model.getRandomHero(heroes));\n    }\n    promise\n      .then(hero => this.view.renderHero('big', hero))\n      .then(template => this.displayBigHero(template));\n  };\n\n  displayBigHero = template => {\n    const heroCardBig = this.resultDiv.querySelector('.hero-card__big');\n    if (heroCardBig) {\n      this.resultDiv.replaceChild(template, heroCardBig);\n    } else {\n      this.resultDiv.insertAdjacentElement('afterbegin', template);\n    }\n  };\n\n  displayHeroesList = template => {\n    const slider = this.resultDiv.querySelector('.hero-list__slider');\n    slider.innerHTML = '';\n    slider.append(template);\n  };\n\n  renderSimilarHeroes = state => {\n    const heroes = this.getHeroes().then(dataHeroes =>\n      this.model.calculateSimilarity(dataHeroes, state),\n    );\n    heroes.then(dataHeroes => this.renderHeroCard(dataHeroes, dataHeroes[0].id));\n    heroes.then(dataHeroes => this.renderHeroesList(dataHeroes));\n  };\n\n  formFilterHandler = element => {\n    switch (element.value) {\n      case 'all':\n        this.state[element.name] = null;\n        break;\n      default:\n        this.state[element.name] = element.value;\n    }\n    const promise = this.getHeroes().then(dataHeroes =>\n      this.model.filterFromState(dataHeroes, this.state),\n    );\n    promise.then(dataHeroes => this.renderHeroCard(dataHeroes));\n    promise.then(dataHeroes => this.renderHeroesList(dataHeroes));\n  };\n\n  resetFilter = () => {\n    this.state = {\n      house: null,\n      gender: null,\n      name: null,\n      staff: null,\n      isAlive: null,\n    };\n    const promise = this.getHeroes();\n    promise.then(dataHeroes => this.renderHeroCard(dataHeroes));\n    promise.then(dataHeroes => this.renderHeroesList(dataHeroes));\n  };\n}\n\nexport default Controller;\n","/* eslint-disable indent */\n\nclass Hero {\n  constructor({\n    name,\n    dateOfBirth,\n    eyeColour,\n    hairColour,\n    gender,\n    hogwartsStaff,\n    hogwartsStudent,\n    house,\n    image,\n    patronus,\n    species,\n    alive,\n    actor,\n  }) {\n    this.name = name;\n    this.dateOfBirth = dateOfBirth;\n    this.eyeColour = eyeColour;\n    this.hairColour = hairColour;\n    this.gender = gender;\n    this.hogwartsStaff = hogwartsStaff;\n    this.hogwartsStudent = hogwartsStudent;\n    this.hogwarts = this.assignHoggwarts();\n    this.house = house;\n    this.patronus = patronus;\n    this.species = species;\n    this.image = `${image.slice(0, 4)}s${image.slice(4)}`;\n    this.alive = alive;\n    this.actor = actor;\n    this.id = null;\n  }\n\n  fromHogwarts = () => !!(this.hogwartsStaff || this.hogwartsStudent);\n\n  assignHoggwarts = () => {\n    switch (this.fromHogwarts()) {\n      case true:\n        switch (this.hogwartsStaff) {\n          case true:\n            return 'staff';\n          default:\n            return 'student';\n        }\n      default:\n        return '';\n    }\n  };\n}\n\nexport default Hero;\n","/* eslint-disable import/extensions */\n/* eslint-disable indent */\n\nimport Hero from './hero.js';\n\nconst URL = 'https://hp-api.herokuapp.com/api/characters';\n\nclass Model {\n  constructor(url) {\n    this.url = url;\n    this.heroes = this.getheroesFromServer();\n  }\n\n  getHeroes = () => this.heroes.then(heroes => Promise.resolve(heroes));\n\n  getheroesFromServer() {\n    return new Promise((resolve, reject) => {\n      const xhr = new XMLHttpRequest();\n      xhr.responseType = 'json';\n      xhr.open('GET', this.url);\n      xhr.addEventListener('load', () => {\n        if (xhr.status !== 200) {\n          alert(`Cannot load dataHeroes ${xhr.status}: ${xhr.statusText}. Please, reload`);\n          reject();\n        }\n        resolve(xhr.response);\n      });\n\n      xhr.addEventListener('error', () => {\n        alert(`Cannot load dataHeroes ${xhr.status}: ${xhr.statusText}. Please, reload`);\n        reject();\n      });\n      xhr.send();\n    }).then(dataHeroes => this.constructHeroesList(dataHeroes));\n  }\n\n  constructHeroesList = dataHeroes => Model.$constructHeroesList(dataHeroes);\n\n  static $constructHeroesList(dataHeroes) {\n    let id = 1;\n    const heroes = dataHeroes.map(item => {\n      const hero = new Hero(item);\n      hero.id = id;\n      id += 1;\n      return hero;\n    });\n    return heroes;\n  }\n\n  getRandomHero = dataHeroes => Model.getRandomHero(dataHeroes);\n\n  static getRandomHero(dataHeroes) {\n    const index = Math.floor(Math.random() * dataHeroes.length);\n    return dataHeroes[index];\n  }\n\n  getRandomHeroes = dataHeroes => Model.getRandomHeroes(dataHeroes);\n\n  static getRandomHeroes(dataHeroes) {\n    const heroes = new Set();\n    while (heroes.size < 5) {\n      const index = Math.floor(Math.random() * dataHeroes.length);\n      heroes.add(dataHeroes[index]);\n    }\n    return Array.from(heroes);\n  }\n\n  getHero = (dataHeroes, id) => Model.getHero(dataHeroes, id);\n\n  static getHero(dataHeroes, id) {\n    const hero = dataHeroes.find(item => item.id === id);\n    return hero;\n  }\n\n  filterFromState = (dataHeroes, state) => {\n    const fileteredHeroes = Object.entries(state).reduce(\n      (initial, entry) =>\n        initial.then(result => {\n          if (entry[1] !== null) {\n            const [key, value] = entry;\n            const newdataHeroes = result.filter(hero => {\n              switch (key) {\n                case 'alive':\n                  return hero[key] === !!value;\n                case 'name':\n                  return hero[key].toLowerCase().includes(value.toLowerCase());\n                default:\n                  return hero[key].toLowerCase() === value.toLowerCase();\n              }\n            });\n            return new Promise((resolve, reject) => resolve(newdataHeroes));\n          }\n          return new Promise((resolve, reject) => resolve(result));\n        }),\n      Promise.resolve(dataHeroes),\n    );\n    return fileteredHeroes.then(resultHeroes => resultHeroes);\n  };\n\n  filterByHouse = (dataHeroes, faculty) => Model.filterByHouse(dataHeroes, faculty);\n\n  static filterByHouse(dataHeroes, faculty) {\n    if (faculty === 'hogwards') {\n      return dataHeroes;\n    }\n    const newdataHeroes = dataHeroes.filter(hero => hero.house === 'faculty');\n    return newdataHeroes;\n  }\n\n  filterByHogwarts = (dataHeroes, hogwarts) => Model.filterByHogwarts(dataHeroes, hogwarts);\n\n  static filterByHogwarts(dataHeroes, hogwarts) {\n    let newdataHeroes = [];\n    if (hogwarts === '') {\n      newdataHeroes = dataHeroes.filter(hero => !hero.fromHogwarts());\n    } else {\n      newdataHeroes = dataHeroes.filter(hero => hero.hogwarts);\n    }\n    return newdataHeroes;\n  }\n\n  filterByGender = (dataHeroes, gender) => Model.filterByGender(dataHeroes, gender);\n\n  static filterByGender(dataHeroes, gender) {\n    const newdataHeroes = dataHeroes.filter(hero => hero.gender === gender);\n    return newdataHeroes;\n  }\n\n  filterByName = (dataHeroes, name) => Model.filterByName(dataHeroes, name);\n\n  static filterByName(dataHeroes, name) {\n    if (name === '') {\n      return dataHeroes;\n    }\n    const newdataHeroes = dataHeroes.filter(hero =>\n      hero.name.toLowerCase().includes(name.toLowerCase()),\n    );\n    return newdataHeroes;\n  }\n\n  calculateSimilarity = (dataHeroes, state) => Model.calculateSimilarity(dataHeroes, state);\n\n  static calculateSimilarity(dataHeroes, state) {\n    let heroes = {};\n    Object.entries(state).forEach(([key, [val, score]]) => {\n      const filteredHeroes = dataHeroes.filter(hero => hero[key] === val);\n      filteredHeroes.forEach(hero => {\n        if (hero.id in heroes) {\n          heroes[hero.id] += score;\n        } else {\n          heroes[hero.id] = score;\n        }\n      });\n    });\n    heroes = Object.entries(heroes);\n    heroes.sort((a, b) => b[1] - a[1]);\n    heroes = heroes.map(hero => hero[0]);\n    heroes = heroes.map(id => dataHeroes.find(hero => hero.id === +id));\n    return heroes.slice(0, 6);\n  }\n}\n\nconst model = new Model(URL);\nexport default model;\n","/* eslint-disable indent */\n\nclass View {\n  renderHero = (templateIdMark, hero) => View.renderHero(templateIdMark, hero);\n\n  static renderHero(templateIdMark, hero) {\n    let template = document\n      .querySelector(`#${templateIdMark}Hero`)\n      .content.querySelector(`.hero-card__${templateIdMark}`)\n      .cloneNode(true);\n    template = View.renderHeroeSmall(hero, template);\n    if (templateIdMark === 'big') {\n      template = View.renderHeroBig(hero, template);\n    }\n    template.dataset.id = hero.id;\n    return template;\n  }\n\n  generateOccupation = hero => View.generateOccupation(hero);\n\n  static generateOccupation(hero) {\n    let occupationTemplate = '';\n    if (hero.fromHogwarts()) {\n      if (hero.hogwartsStaff) {\n        occupationTemplate += 'Professor of ';\n      } else {\n        occupationTemplate += 'Student of ';\n      }\n    } else {\n      occupationTemplate += 'Not from ';\n    }\n    occupationTemplate += 'Hogwarts';\n    if (hero.house) {\n      occupationTemplate += `, ${hero.house}`;\n    }\n    occupationTemplate += '.';\n    return occupationTemplate;\n  }\n\n  renderHeroeSmall = (hero, template) => View.renderHeroeSmall(hero, template);\n\n  static renderHeroeSmall(hero, template) {\n    const newTemplate = template.cloneNode(true);\n    const templateImg = newTemplate.querySelector('.card-img');\n    templateImg.src = hero.image;\n    templateImg.alt = hero.name;\n    newTemplate.querySelector('.card-title').textContent = hero.name;\n    newTemplate.querySelector('.hero-name').textContent = hero.name;\n    newTemplate.querySelector('.hero-birth-date').textContent = hero.dateOfBirth;\n    newTemplate.querySelector('.hero-occupation').textContent = View.generateOccupation(hero);\n    return newTemplate;\n  }\n\n  renderHeroBig = (hero, template) => View.renderHeroBig(hero, template);\n\n  static renderHeroBig(hero, template) {\n    const newTemplate = template.cloneNode(true);\n    newTemplate.querySelector('.hero-eyes').textContent = hero.eyeColour;\n    newTemplate.querySelector('.hero-hair').textContent = hero.hairColour;\n    newTemplate.querySelector('.hero-patronus').textContent = hero.patronus;\n    newTemplate.querySelector('.hero-actor').textContent = hero.actor;\n    return newTemplate;\n  }\n\n  renderHeroesList = heroes => View.renderHeroesList(heroes);\n\n  static renderHeroesList(heroes) {\n    const template = document.createDocumentFragment();\n    heroes.forEach(hero => template.append(View.renderHero('small', hero)));\n    return template;\n  }\n}\n\nexport default View;\n","/* eslint-disable indent */\n\nconst CARD_MARGIN = 15;\n\nclass Slider {\n  constructor() {\n    this.sliderButtons = document.querySelectorAll('.btn-list');\n    this.slider = document.querySelector('.hero-list__slider');\n    this.sliderWidth = this.slider.offsetWidth;\n  }\n\n  sliderMove = element => {\n    const cardWidth = this.slider.querySelector('.hero-card__small').offsetWidth + CARD_MARGIN;\n    const direction = +element.dataset.dir;\n    const cardsPerSlider = Math.round(this.sliderWidth / cardWidth);\n    const totalSliderWidth = cardWidth * this.slider.children.length;\n    const left = this.slider.style.left ? parseInt(this.slider.style.left, 10) : 0;\n    if (\n      Math.abs(left + direction * cardWidth) >\n      totalSliderWidth - (cardsPerSlider === 1 ? cardsPerSlider : cardsPerSlider - 1) * cardWidth\n    ) {\n      this.slider.style.left = '0px';\n    } else if (left + direction * cardWidth > 0) {\n      this.slider.style.left = `-${\n        (this.slider.children.length * cardWidth - cardsPerSlider * cardWidth) * direction\n      }px`;\n    } else {\n      this.slider.style.left = `${left + cardWidth * direction}px`;\n    }\n  };\n\n  cardHandler = target => {\n    const card = target.closest('div');\n    if (!card.classList.contains('hero-card__small')) {\n      return false;\n    }\n    return +card.dataset.id;\n  };\n}\n\nexport default Slider;\n","/* eslint-disable indent */\n\nclass ModalForm {\n  constructor() {\n    this.modalWindow = document.querySelector('.modal');\n    this.form = this.modalWindow.querySelector('.similarity-form');\n    this.findButton = document.querySelector('.btn-find');\n  }\n\n  modalFormHandler = () => {\n    this.modalWindow.classList.remove('modal-closed');\n    this.modalWindow.classList.add('modal-open');\n    this.modalWindow.querySelector('.btn-modal').addEventListener('click', () => this.closeModal());\n  };\n\n  closeModal = () => {\n    this.modalWindow.classList.add('modal-closed');\n    this.modalWindow.classList.remove('modal-open');\n  };\n\n  modalFormSubmit = () => {\n    const state = {};\n    [...this.form.elements].forEach(element => {\n      if (element.type === 'radio' && element.checked) {\n        state[element.name] = [element.value, +element.dataset.score];\n      }\n    });\n    return state;\n  };\n}\n\nexport default ModalForm;\n","/* eslint-disable import/extensions */\n/* eslint-disable indent */\n\nimport Controller from './controller.js';\nimport model from './model.js';\nimport View from './view.js';\nimport Slider from './slider.js';\nimport ModalForm from './modalForm.js';\n\nclass App {\n  constructor() {\n    this.controller = new Controller(model, new View());\n    this.slider = new Slider();\n    this.modalWindow = new ModalForm();\n    this.facultyForm = document.querySelector('.faculty-form');\n    this.filterForm = document.querySelector('.filter-form');\n    this.resetBtn = document.querySelector('.btn-reset');\n  }\n\n  addListeners = () => {\n    this.facultyForm.addEventListener('input', this.filterFormHandler);\n    this.filterForm.addEventListener('input', this.filterFormHandler);\n    this.resetBtn.addEventListener('click', this.resetHandler);\n    this.slider.sliderButtons.forEach(btn =>\n      btn.addEventListener('click', ({ target }) => {\n        this.slider.sliderMove(target);\n      }),\n    );\n    this.slider.slider.addEventListener('click', ({ target }) => {\n      const id = this.slider.cardHandler(target, this);\n      this.controller\n        .getHeroes()\n        .then(dataHeroes => this.controller.renderHeroCard(dataHeroes, id));\n    });\n    this.modalWindow.findButton.addEventListener('click', this.modalWindow.modalFormHandler);\n    this.modalWindow.form.addEventListener('submit', event => {\n      event.preventDefault();\n      const state = this.modalWindow.modalFormSubmit();\n      this.controller.renderSimilarHeroes(state);\n      this.modalWindow.closeModal();\n    });\n  };\n\n  filterFormHandler = ({ target }) => {\n    this.controller.formFilterHandler(target);\n  };\n\n  resetHandler = () => {\n    this.controller.resetFilter();\n  };\n}\nconst app = new App();\napp.addListeners();\n"]}